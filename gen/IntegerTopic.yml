---

classes:
  IntegerSubscriber:
    methods:
      IntegerSubscriber:
        overloads:
          "":
            ignore: true
          NT_Subscriber, int64_t:
            ignore: true
      Get:
        overloads:
          '[const]':
          int64_t [const]:
      GetAtomic:
        overloads:
          '[const]':
          int64_t [const]:
      ReadQueue:
      GetTopic:
    inline_code: |
      .def("close", [](IntegerSubscriber *self) {
        py::gil_scoped_release release;
        *self = IntegerSubscriber();
      }, py::doc("Destroys the subscriber"))
      .def("__enter__", [](IntegerSubscriber *self) {
        return self;
      })
      .def("__exit__", [](IntegerSubscriber *self, py::args args) {
        py::gil_scoped_release release;
        *self = IntegerSubscriber();
      })
  IntegerPublisher:
    methods:
      IntegerPublisher:
        overloads:
          "":
            ignore: true
          NT_Publisher:
            ignore: true
      Set:
      SetDefault:
      GetTopic:
    inline_code: |
      .def("close", [](IntegerPublisher *self) {
        py::gil_scoped_release release;
        *self = IntegerPublisher();
      }, py::doc("Destroys the publisher"))
      .def("__enter__", [](IntegerPublisher *self) {
        return self;
      })
      .def("__exit__", [](IntegerPublisher *self, py::args args) {
        py::gil_scoped_release release;
        *self = IntegerPublisher();
      })
  IntegerEntry:
    methods:
      IntegerEntry:
        overloads:
          "":
            ignore: true
          NT_Entry, int64_t:
            ignore: true
      GetHandle:
        ignore: true
      GetTopic:
      Unpublish:
    inline_code: |
      .def("close", [](IntegerEntry *self) {
        py::gil_scoped_release release;
        *self = IntegerEntry();
      }, py::doc("Destroys the entry"))
      .def("__enter__", [](IntegerEntry *self) {
        return self;
      })
      .def("__exit__", [](IntegerEntry *self, py::args args) {
        py::gil_scoped_release release;
        *self = IntegerEntry();
      })
  IntegerTopic:
    attributes:
      kTypeString:
    methods:
      IntegerTopic:
        overloads:
          "":
            ignore: true
          NT_Topic:
            ignore: true
          Topic:
      Subscribe:
      SubscribeEx:
      Publish:
      PublishEx:
      GetEntry:
      GetEntryEx:
    inline_code: |
      .def("close", [](IntegerTopic *self) {
        py::gil_scoped_release release;
        *self = IntegerTopic();
      }, py::doc("Destroys the topic"))
      .def("__enter__", [](IntegerTopic *self) {
        return self;
      })
      .def("__exit__", [](IntegerTopic *self, py::args args) {
        py::gil_scoped_release release;
        *self = IntegerTopic();
      })
