---

extra_includes:
- networktables/BooleanArrayTopic.h
- networktables/BooleanTopic.h
- networktables/DoubleArrayTopic.h
- networktables/DoubleTopic.h
- networktables/FloatArrayTopic.h
- networktables/FloatTopic.h
- networktables/IntegerArrayTopic.h
- networktables/IntegerTopic.h
- networktables/MultiSubscriber.h
- networktables/RawTopic.h
- networktables/StringArrayTopic.h
- networktables/StringTopic.h
- networktables/Topic.h
- src/py2value.h
- src/nt_instance.h
- wpi/DataLog.h

classes:
  NetworkTableInstance:
    force_type_casters:
    - std::function
    attributes:
      kDefaultPort3:
      kDefaultPort4:
    enums:
      NetworkMode:
        arithmetic: true
        inline_code: |
          .value("kNetModeStarting", (nt::NetworkTableInstance::NetworkMode)NT_NET_MODE_STARTING)
      LogLevel:
    methods:
      NetworkTableInstance:
        overloads:
          "":
            ignore: true
          NT_Inst:
            ignore: true
      GetDefault:
      Create:
      Destroy:
        cpp_code: |
          [](NetworkTableInstance * self) {
            pyntcore::onInstanceDestroy(self);
            py::gil_scoped_release release;
            NetworkTableInstance::Destroy(*self);
          }
      GetHandle:
        internal: true
      GetTopic:
      GetBooleanTopic:
      GetIntegerTopic:
      GetFloatTopic:
      GetDoubleTopic:
      GetStringTopic:
      GetRawTopic:
      GetBooleanArrayTopic:
      GetIntegerArrayTopic:
      GetFloatArrayTopic:
      GetDoubleArrayTopic:
      GetStringArrayTopic:
      GetTopics:
        overloads:
          "":
          std::string_view:
          std::string_view, unsigned int:
          std::string_view, std::span<std::string_view>:
      GetTopicInfo:
        overloads:
          "":
          std::string_view:
          std::string_view, unsigned int:
          std::string_view, std::span<std::string_view>:
      GetEntry:
      GetTable:
      RemoveListener:
      WaitForListenerQueue:
      AddConnectionListener:
      AddTimeSyncListener:
      AddListener:
        overloads:
          nt::Topic, unsigned int, ListenerCallback:
          nt::Subscriber&, unsigned int, ListenerCallback:
          nt::MultiSubscriber&, int, ListenerCallback:
          NetworkTableEntry&, int, ListenerCallback:
          std::span<const std::string_view>, int, ListenerCallback:
      GetNetworkMode:
      StartLocal:
        cpp_code: |
          [](NetworkTableInstance * self) {
            pyntcore::onInstanceStart(self);
            py::gil_scoped_release release;
            self->StartLocal();
          }
      StopLocal:
      StartServer:
        cpp_code: |
          [](NetworkTableInstance * self, std::string_view persist_filename,  const char* listen_address,
             unsigned int port3, unsigned int port4) {
            pyntcore::onInstanceStart(self);
            py::gil_scoped_release release;
            self->StartServer(persist_filename, listen_address, port3, port4);
          }
      StopServer:
      StartClient3:
        cpp_code: |
          [](NetworkTableInstance * self, std::string_view identity) {
            pyntcore::onInstanceStart(self);
            py::gil_scoped_release release;
            self->StartClient3(identity);
          }
      StartClient4:
        cpp_code: |
          [](NetworkTableInstance * self, std::string_view identity) {
            pyntcore::onInstanceStart(self);
            py::gil_scoped_release release;
            self->StartClient4(identity);
          }
      StopClient:
      SetServer:
        overloads:
          char*, unsigned int:
          std::span<const std::pair<std::string_view, unsigned int>>:
          std::span<const std::string_view>, unsigned int:
      SetServerTeam:
      Disconnect:
      StartDSClient:
      StopDSClient:
      FlushLocal:
      Flush:
      GetConnections:
      IsConnected:
      GetServerTimeOffset:
      StartEntryDataLog:
      StopEntryDataLog:
      StartConnectionDataLog:
      StopConnectionDataLog:
      AddLogger:
      RemoveLogger:
      operator==:
      operator!=:
    inline_code: |
      .def("configPythonLogging", [](NetworkTableInstance * self, 
        NetworkTableInstance::LogLevel minLevel, NetworkTableInstance::LogLevel maxLevel, py::str logName) {
          py::module::import("ntcore._logutil").attr("_config_logging")(self, minLevel, maxLevel, logName);
        }, py::kw_only(),
          py::arg("min") = NetworkTableInstance::LogLevel::kLogInfo,
          py::arg("max") = NetworkTableInstance::LogLevel::kLogCritical,
          py::arg("name") = "nt",
        py::doc("Configure python logging for this instance.\n"
                "\n"
                ":param min:  Minimum NT level to log\n"
                ":param max:  Maximum NT level to log\n"
                ":param name: Name of python logger\n"
                "\n"
                ".. note:: This must be called before the instance is started")
      )
      .def("_reset", [](NetworkTableInstance *self) {
        pyntcore::onInstancePreReset(self);
        {
          py::gil_scoped_release release;
          nt::ResetInstance(self->GetHandle());
        }
        pyntcore::onInstancePostReset(self);
      })
