---

extra_includes:
- networktables/BooleanArrayTopic.h
- networktables/BooleanTopic.h
- networktables/DoubleArrayTopic.h
- networktables/DoubleTopic.h
- networktables/FloatArrayTopic.h
- networktables/FloatTopic.h
- networktables/IntegerArrayTopic.h
- networktables/IntegerTopic.h
- networktables/NetworkTableInstance.h
- networktables/RawTopic.h
- networktables/StringArrayTopic.h
- networktables/StringTopic.h
- networktables/Topic.h
- src/py2value.h
- src/pyentry.h

classes:
  NetworkTable:
    attributes:
      PATH_SEPARATOR_CHAR:
    methods:
      BasenameKey:
      NormalizeKey:
        overloads:
          std::string_view, bool:
          std::string_view, wpi::SmallVectorImpl<char>&, bool:
            ignore: true
      GetHierarchy:
      NetworkTable:
        ignore: true
      GetInstance:
      GetEntry:
      GetTopic:
      GetBooleanTopic:
      GetIntegerTopic:
      GetFloatTopic:
      GetDoubleTopic:
      GetStringTopic:
      GetRawTopic:
      GetBooleanArrayTopic:
      GetIntegerArrayTopic:
      GetFloatArrayTopic:
      GetDoubleArrayTopic:
      GetStringArrayTopic:
      GetSubTable:
      ContainsKey:
      ContainsSubTable:
      GetTopicInfo:
      GetTopics:
      GetKeys:
      GetSubTables:
      SetPersistent:
      ClearPersistent:
      IsPersistent:
      PutNumber:
      SetDefaultNumber:
      GetNumber:
        cpp_code: |
          [](NetworkTable * table, std::string_view key, py::object defaultValue) -> py::object {
            nt::NetworkTableEntry entry;
            {
              py::gil_scoped_release release;
              entry = table->GetEntry(key);
            }
            return pyntcore::GetDoubleEntry(entry, defaultValue);
          }
      PutString:
      SetDefaultString:
      GetString:
        cpp_code: |
          [](NetworkTable * table, std::string_view key, py::object defaultValue) -> py::object {
            nt::NetworkTableEntry entry;
            {
              py::gil_scoped_release release;
              entry = table->GetEntry(key);
            }
            return pyntcore::GetStringEntry(entry, defaultValue);
          }
      PutBoolean:
      SetDefaultBoolean:
      GetBoolean:
        cpp_code: |
          [](NetworkTable * table, std::string_view key, py::object defaultValue) -> py::object {
            nt::NetworkTableEntry entry;
            {
              py::gil_scoped_release release;
              entry = table->GetEntry(key);
            }
            return pyntcore::GetBooleanEntry(entry, defaultValue);
          }
      PutBooleanArray:
      SetDefaultBooleanArray:
      GetBooleanArray:
        cpp_code: |
          [](NetworkTable * table, std::string_view key, py::object defaultValue) -> py::object {
            nt::NetworkTableEntry entry;
            {
              py::gil_scoped_release release;
              entry = table->GetEntry(key);
            }
            return pyntcore::GetBooleanArrayEntry(entry, defaultValue);
          }
      PutNumberArray:
      SetDefaultNumberArray:
      GetNumberArray:
        cpp_code: |
          [](NetworkTable * table, std::string_view key, py::object defaultValue) -> py::object {
            nt::NetworkTableEntry entry;
            {
              py::gil_scoped_release release;
              entry = table->GetEntry(key);
            }
            return pyntcore::GetDoubleArrayEntry(entry, defaultValue);
          }
      PutStringArray:
      SetDefaultStringArray:
      GetStringArray:
        cpp_code: |
          [](NetworkTable * table, std::string_view key, py::object defaultValue) -> py::object {
            nt::NetworkTableEntry entry;
            {
              py::gil_scoped_release release;
              entry = table->GetEntry(key);
            }
            return pyntcore::GetStringArrayEntry(entry, defaultValue);
          }
      PutRaw:
      SetDefaultRaw:
      GetRaw:
        cpp_code: |
          [](NetworkTable * table, std::string_view key, py::object defaultValue) -> py::object {
            nt::NetworkTableEntry entry;
            {
              py::gil_scoped_release release;
              entry = table->GetEntry(key);
            }
            return pyntcore::GetRawEntry(entry, defaultValue);
          }
      PutValue:
        ignore: true
      SetDefaultValue:
        ignore: true
      GetValue:
        ignore: true
      GetPath:

inline_code: |
  #include <src/NetworkTable.cpp.inl>