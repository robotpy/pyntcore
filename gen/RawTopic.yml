---

classes:
  RawSubscriber:
    methods:
      RawSubscriber:
        overloads:
          "":
            ignore: true
          NT_Subscriber, std::span<const uint8_t>:
            ignore: true
      Get:
        overloads:
          '[const]':
          std::span<const uint8_t> [const]:
          wpi::SmallVectorImpl<SmallElemType>& [const]:
            ignore: true
          wpi::SmallVectorImpl<SmallElemType>&, std::span<const uint8_t> [const]:
            ignore: true
      GetAtomic:
        overloads:
          '[const]':
          std::span<const uint8_t> [const]:
          wpi::SmallVectorImpl<SmallElemType>& [const]:
            ignore: true
          wpi::SmallVectorImpl<SmallElemType>&, std::span<const uint8_t> [const]:
            ignore: true
      ReadQueue:
      GetTopic:
    inline_code: |
      .def("close", [](RawSubscriber *self) {
        py::gil_scoped_release release;
        *self = RawSubscriber();
      }, py::doc("Destroys the subscriber"))
      .def("__enter__", [](RawSubscriber *self) {
        return self;
      })
      .def("__exit__", [](RawSubscriber *self, py::args args) {
        py::gil_scoped_release release;
        *self = RawSubscriber();
      })
  RawPublisher:
    methods:
      RawPublisher:
        overloads:
          "":
            ignore: true
          NT_Publisher:
            ignore: true
      Set:
      SetDefault:
      GetTopic:
    inline_code: |
      .def("close", [](RawPublisher *self) {
        py::gil_scoped_release release;
        *self = RawPublisher();
      }, py::doc("Destroys the publisher"))
      .def("__enter__", [](RawPublisher *self) {
        return self;
      })
      .def("__exit__", [](RawPublisher *self, py::args args) {
        py::gil_scoped_release release;
        *self = RawPublisher();
      })
  RawEntry:
    methods:
      RawEntry:
        overloads:
          "":
            ignore: true
          NT_Entry, std::span<const uint8_t>:
            ignore: true
      GetHandle:
        ignore: true
      GetTopic:
      Unpublish:
    inline_code: |
      .def("close", [](RawEntry *self) {
        py::gil_scoped_release release;
        *self = RawEntry();
      }, py::doc("Destroys the entry"))
      .def("__enter__", [](RawEntry *self) {
        return self;
      })
      .def("__exit__", [](RawEntry *self, py::args args) {
        py::gil_scoped_release release;
        *self = RawEntry();
      })
  RawTopic:
    methods:
      RawTopic:
        overloads:
          "":
            ignore: true
          NT_Topic:
            ignore: true
          Topic:
      Subscribe:
      Publish:
      PublishEx:
      GetEntry:
    inline_code: |
      .def("close", [](RawTopic *self) {
        py::gil_scoped_release release;
        *self = RawTopic();
      }, py::doc("Destroys the topic"))
      .def("__enter__", [](RawTopic *self) {
        return self;
      })
      .def("__exit__", [](RawTopic *self, py::args args) {
        py::gil_scoped_release release;
        *self = RawTopic();
      })
